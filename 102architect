#!/usr/bin/env python3

import math, sys
from math import *

def rotation(alpha, x, y) :
    print("Rotation by a ", int(alpha), " degree angle", sep = "")

def translation(i, j, x, y) :
    print("Translation along vector (", int(i), ", ", int(j), ")", sep = "")

def reflection(alpha, x, y) :

    print("Reflection over an axis with an inclination angle of ", int(alpha), " degrees", sep = "")

def scaling(m, n, x, y) :

    print("Scaling by the factors ", int(m), " and ", int(n), "", sep = "")

def main() :

    try :
        x = sys.argv[1]
        y = sys.argv[2]
        z = sys.argv[2]

        intx = int(x)
        inty = int(y)   
    except IndexError :
        sys.exit(84)
    matrice = [1.00, 0.00, 0.00,
               0.00, 1.00, 0.00,
               0.00, 0.00, 1.00]
    
    i = 3

    for i in range(len(sys.argv)) :
        
        if sys.argv[i] == "-t" :
            translation(float(sys.argv[i + 1]), float(sys.argv[i + 2]), float(x), float(y))
            matrice[2] = float(sys.argv[i + 1]) + matrice[2]
            matrice[5] = float(sys.argv[i + 2]) + matrice[5]
        
        if sys.argv[i] == "-r" :
            rotation(float(sys.argv[i + 1]), int(x), int(y))
            matrice[0] = math.cos(float(sys.argv[i + 1]) / 180 * math.pi)
            matrice[1] = -math.sin(float(sys.argv[i + 1]) / 180 * math.pi)
            matrice[3] = math.sin(float(sys.argv[i + 1]) / 180 * math.pi)
            matrice[4] = matrice[0]

        if sys.argv[i] == "-s" :
            reflection(float(sys.argv[i + 1]), int(x), int(y))
            matrice[0] = math.cos(2 * float(sys.argv[i + 1]) / 180 * math.pi)
            matrice[1] = math.sin(2 * float(sys.argv[i + 1]) / 180 * math.pi)
            matrice[3] = math.sin(2 * float(sys.argv[i + 1]) / 180 * math.pi)
            matrice[4] = -matrice[0]

        if sys.argv[i] == "-z" :
            scaling(float(sys.argv[i + 1]), float(sys.argv[i + 2]), float(x), float(y))
            matrice[0] = float(sys.argv[i + 1]) * matrice[0]
            matrice[4] = float(sys.argv[i + 2]) * matrice[4]        

    first = matrice[0] * intx + matrice[1] * inty + matrice[2]
    second = matrice[3] * intx + matrice[4] * inty + matrice[5]
    
    print("%.2f"%matrice[0], "\t%.2f"%matrice[1], "\t%.2f"%matrice[2], sep = "")
    print("%.2f"%matrice[3], "\t%.2f"%matrice[4], "\t%.2f"%matrice[5], sep = "")
    print("%.2f"%matrice[6], "\t%.2f"%matrice[7], "\t%.2f"%matrice[8], sep = "")
    print("(",intx,".00", ", ",z,".00) => (%.2f"%first,", %.2f"%second,")", sep = "")

main()
